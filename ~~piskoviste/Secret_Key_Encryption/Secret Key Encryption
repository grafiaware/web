https://deliciousbrains.com/php-encryption-methods/
Secret Key Encryption

Secret key encryption (or symmetric encryption as it’s also known) uses a single key to both encrypt and decrypt data. In the past PHP relied on mcrypt and openssl for secret key encryption. PHP 7.2 introduced Sodium, which is more modern and widely considered more secure. If you’re running an older version of PHP you can install Sodium via The PHP Extension Community Library aka PECL.

In order to encrypt a value, first you’ll need an encryption key, which can be generated using the sodium_crypto_secretbox_keygen() function.

$key = sodium_crypto_secretbox_keygen();

You can also use the random_bytes() function with the SODIUM_CRYPTO_SECRETBOX_KEYBYTES integer constant for the key length, but using sodium_crypto_secretbox_keygen() ensures that the key length is always correct (i.e. not too short), and it’s easier.

$key = random_bytes( SODIUM_CRYPTO_SECRETBOX_KEYBYTES );

Either way, you’ll usually only do this once and store the result as an environment variable. Remember that this key must be kept secret at all costs. If the key is ever compromised, so is any data encrypted by using it.

To encrypt the original value, pass it to the sodium_crypto_secretbox() function with the $key and a generated $nonce. To create the nonce use the random_bytes() function, with the SODIUM_CRYPTO_SECRETBOX_NONCEBYTES integer constant for the nonce length, because the same nonce should never be reused.

$nonce = random_bytes( SODIUM_CRYPTO_SECRETBOX_NONCEBYTES );
$encrypted_result = sodium_crypto_secretbox( 'This is a secret!', $nonce, $key );

This presents a problem because we need the nonce to decrypt the value later. Luckily, nonces don’t have to be kept secret so we can prepend it to our $encrypted_result then base64_encode() the value before saving it to the database.

$encoded = base64_encode( $nonce . $encrypted_result );

This will create a base64 encoded string of 76 characters in length.

When it comes to decrypting the value, do the opposite, starting with decoding the base64 encoded string.

$decoded = base64_decode($encoded);

Because we know the length of the nonce (SODIUM_CRYPTO_SECRETBOX_NONCEBYTES) we can extract it using mb_substr() before decrypting the value.

$nonce = mb_substr($decoded, 0, SODIUM_CRYPTO_SECRETBOX_NONCEBYTES, '8bit');
$encrypted_result = mb_substr($decoded, SODIUM_CRYPTO_SECRETBOX_NONCEBYTES, null, '8bit');
$plaintext = sodium_crypto_secretbox_open($encrypted_result, $nonce, $key);
// string(17) "This is a secret!"

That’s all there is to secret key encryption in PHP, thanks to Sodium!